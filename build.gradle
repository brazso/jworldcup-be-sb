buildscript {
	ext {
		generatedSourcesRelativePath = "generated/src"
	}
    dependencies {
        classpath('org.yaml:snakeyaml:1.19')
        classpath('io.swagger.codegen.v3:swagger-codegen-maven-plugin:3.0.31')
    }
}

plugins {
	id("org.springframework.boot") version "2.7.18"
	id('io.spring.dependency-management') version '1.1.4'
	id('java')
	id('eclipse')
	id("de.undercouch.download") version "5.5.0"
	id("io.freefair.lombok") version "8.4"
}

//Buildship doesn't use that hooks (https://discuss.gradle.org/t/when-does-buildship-eclipse-customization-run/20781/2)
//you need to run `gradle eclipseJdt` separately
eclipse.jdt.file.withProperties { props ->
	props['org.eclipse.jdt.core.compiler.problem.enablePreviewFeatures']= 'enabled'
	props['org.eclipse.jdt.core.compiler.problem.reportPreviewFeatures']= 'ignore'
}

eclipse { // id 'eclipse'
	synchronizationTasks eclipseJdt
}

lombok { // id "io.freefair.lombok"
	version = "${lombokVersion}"
}

def applicationConfig = new org.yaml.snakeyaml.Yaml().loadAll(new File("$projectDir/src/main/resources/application.yml").newInputStream()).first()

group = 'com.zematix.jworldcup'
version = applicationConfig.app.version.number
sourceCompatibility = '21'

bootRun {
	String activeProfile = System.properties['spring.profiles.active']
	systemProperty "spring.profiles.active", activeProfile
}

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compile {
		extendsFrom annotationProcessor
	}
	all*.exclude group: 'xml-apis' // xml-apis is already included from jdk9 and it must be excluded from dependencies 
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-freemarker'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-quartz'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springframework.boot:spring-boot-starter-amqp'
	implementation 'org.springframework.boot:spring-boot-starter-reactor-netty'

	implementation 'io.jsonwebtoken:jjwt:0.9.1' // JSON Web Token Support For The JVM
	
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.hsqldb:hsqldb'
	runtimeOnly 'com.mysql:mysql-connector-j'
	
	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation('org.junit.vintage:junit-vintage-engine') // JUnit4 support
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
		
	testImplementation 'org.springframework.amqp:spring-rabbit-test'
	testImplementation 'org.springframework.security:spring-security-test'
	
	implementation 'com.github.ben-manes.caffeine:caffeine:3.0.2'
	
	implementation "com.google.guava:guava:${guavaVersion}"
	
	implementation "org.springdoc:springdoc-openapi-ui:${openapiVersion}"
	 
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	
	implementation "com.querydsl:querydsl-core:${queryDslVersion}"
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	annotationProcessor(
		"com.querydsl:querydsl-apt:${queryDslVersion}:jpa",
		"javax.persistence:javax.persistence-api",
		"javax.annotation:javax.annotation-api"
	)
	
	// Freemark dependencies
	implementation "fr.opensagres.xdocreport:fr.opensagres.xdocreport.document.odt:${xdocreportVersion}"
	implementation "fr.opensagres.xdocreport:fr.opensagres.xdocreport.template.freemarker:${xdocreportVersion}"
	implementation "fr.opensagres.xdocreport:fr.opensagres.xdocreport.converter.odt.odfdom:${xdocreportVersion}"
	
	implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-properties:2.10.1"
	
	// SOAP client
	implementation "com.sun.xml.ws:jaxws-rt:2.3.1"
	
	// JAX-RS Client with Jersey
	implementation "org.glassfish.jersey.containers:jersey-container-servlet:2.32"
	implementation "org.glassfish.jersey.media:jersey-media-json-jackson:2.32"
	implementation "org.glassfish.jersey.ext:jersey-spring5:2.32"

	// Quartz addon for jobs which is not included in "org.springframework.boot:spring-boot-starter-quartz"
	implementation "org.quartz-scheduler:quartz-jobs"
	
	// this Mockito version must be used because at later versions Mockito.when() does not work with  
	// class.static_method() input using PowerMockito.spy. It does work only on mocked object. We need 
	// this feature for partial mock on static methods. Although later Mockito versions since 3.4.0 
	// support MockedStatic, but it is cannot be used for our purpose. 
	testImplementation "org.mockito:mockito-core:2.26.0"
	
	// mostly for static support: partial mock on static methods and Whitebox support
	testImplementation "org.powermock:powermock-api-mockito2:2.0.7"
	testImplementation "org.powermock:powermock-module-junit4:2.0.7"
}

test {
	useJUnitPlatform()
	testLogging.showStandardStreams = true
	
	/*filter {
		//specific test method
		includeTestsMatching "*DaoTest"
	}*/
}

task downloadApi(type: Download, description: "Download Swagger OpenLigaDB JSON file") {
	dependsOn processResources 
	src "https://api.openligadb.de/swagger/v1/swagger.json"
	dest "src/main/resources/swagger/matchdataApi.json"
	onlyIfModified true
}

import io.swagger.codegen.v3.CodegenConfigLoader
import io.swagger.codegen.v3.DefaultGenerator
import io.swagger.codegen.v3.ClientOptInput
import io.swagger.codegen.v3.ClientOpts
import io.swagger.v3.parser.OpenAPIV3Parser

task generateApi {
	dependsOn downloadApi
	String swaggerSourceFile = "$projectDir/src/main/resources/swagger/matchdataApi.json"
	String swaggerTargetFolder = "$buildDir/${generatedSourcesRelativePath}/swagger/main/java"
	
	doLast {
		def openAPI = new OpenAPIV3Parser().read(swaggerSourceFile, null, null)
        def clientOpts = new ClientOptInput().openAPI(openAPI)
        def codegenConfig = CodegenConfigLoader.forName('spring')
        codegenConfig.setOutputDir(swaggerTargetFolder)
        clientOpts.setConfig(codegenConfig)
        def clientOps = new ClientOpts()
        clientOps.setProperties([
                'dateLibrary': 'java8-localdatetime', // Date library to use
                'useTags': 'true',  // Use tags for the naming
                'interfaceOnly': 'true',   // Generating the Controller API interface and the models only
                'apiPackage': 'com.msiggi.openligadb.api',
                'modelPackage': 'com.msiggi.openligadb.model',
                'sourceFolder': ''
        ])
        clientOpts.setOpts(clientOps)

        def generator = new DefaultGenerator().opts(clientOpts)
        generator.generate() // Executing the generation
	}
}

task generateTestDatabaseScripts {
	String generatedResourceRoot = "$buildDir/${generatedSourcesRelativePath}/test/resources/database"
	String awkSourceDir = "${projectDir}/src/test/resources/database"

	doLast() {
		mkdir generatedResourceRoot

		exec {
			workingDir awkSourceDir
			commandLine 'awk', '-f', 'drop_db.awk', 'worldcup_test.sql'
			standardOutput new FileOutputStream("${generatedResourceRoot}/worldcup_test_drop.sql")
		}

		exec {
			workingDir awkSourceDir
			commandLine 'awk', '-f', 'create_db.awk', 'worldcup_test.sql'
			standardOutput new FileOutputStream("${generatedResourceRoot}/worldcup_test_create.sql")
		}
		
		exec {
			workingDir awkSourceDir
			commandLine 'awk', '-f', 'insert_db.awk', 'worldcup_test.sql'
			standardOutput new FileOutputStream("${generatedResourceRoot}/worldcup_test_insert.sql")
		}
		
		exec {
			workingDir awkSourceDir
			commandLine 'awk', '-f', 'insert_hsqldb.awk', 'worldcup_test.sql'
			standardOutput new FileOutputStream("${generatedResourceRoot}/worldcup_test_insert_hsqldb.sql")
		}
	}
}

// Eclipse IDE looks for the bootBuildInfo generated properties file during application boot under bin/main/META-INF folder
task copyBuildInfo(type: Copy) {
	dependsOn(tasks["build"])
	from "$buildDir/resources/main/META-INF/build-info.properties"
	into "bin/main/META-INF"
}

compileJava {
	String annotationProcessorPath = "$buildDir/${generatedSourcesRelativePath}/annotationProcessor/main/java"  
	String swaggerPath = "$buildDir/${generatedSourcesRelativePath}/swagger/main/java"
	String testResourcePath = "$buildDir/${generatedSourcesRelativePath}/test/resources"

	sourceSets.main.java { 
		srcDirs += [annotationProcessorPath, swaggerPath]
	}

	sourceSets.test.resources { 
		srcDirs += [testResourcePath]
	}

	File annotationProcessorPathFile = project.file(annotationProcessorPath)
	println "Creating and configuring generated annotationProcessor source directory $annotationProcessorPathFile"
	project.mkdir(annotationProcessorPathFile)
	options.annotationProcessorGeneratedSourcesDirectory = annotationProcessorPathFile
	outputs.dir(annotationProcessorPathFile)
}

tasks.withType(JavaCompile) {
	dependsOn generateTestDatabaseScripts, generateApi//, copyBuildInfo
	options.compilerArgs += [
		//"--enable-preview",
		"-Amapstruct.defaultComponentModel=spring",
		"-Amapstruct.unmappedTargetPolicy=IGNORE"
	]
}

tasks.withType(Test) {
	jvmArgs += [
		//"--enable-preview"
	]
}

tasks.withType(JavaExec) {
	jvmArgs += [
		//"--enable-preview"
	]
}

clean {
	delete "bin/main/META-INF"
}

springBoot {
	//mainClassName = 'com.zematix.jworldcup.backend.Application'
	buildInfo()
}
